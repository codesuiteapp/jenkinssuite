{
  "create_user": {
    "prefix": "create_user",
    "body": [
      "import hudson.security.*",
      "",
      "def role = \"__ROLE__\";",
      "def username = \"__USERNAME__\";",
      "def password = \"__PASSWORD__\";",
      "",
      "def instance = Jenkins.getInstance();",
      "def strategy = instance.getAuthorizationStrategy();",
      "jenkins.model.Jenkins.instance.securityRealm.createAccount(username, password);",
      "if (role == \"ADMIN\") {",
      "    strategy.add(Jenkins.ADMINISTER, username);",
      "} else if (role == \"GUEST\") {",
      "    strategy.add(Jenkins.READ   , username);",
      "    strategy.add(Item.READ      , username);",
      "} else {",
      "    strategy.add(Jenkins.READ   , username);",
      "    strategy.add(Item.BUILD     , username);",
      "    strategy.add(Item.READ      , username);",
      "    strategy.add(Item.CREATE    , username);",
      "    strategy.add(Item.DISCOVER  , username);",
      "    strategy.add(Item.WORKSPACE , username);",
      "    strategy.add(Item.CONFIGURE , username);",
      "    strategy.add(Item.CANCEL    , username);",
      "}",
      "instance.save()"
    ],
    "description": "CreateUser"
  },
  "get_users": {
    "prefix": "get_users",
    "body": [
      "import groovy.json.JsonOutput",
      "",
      "def jenkins = Jenkins.getInstanceOrNull()",
      "def users = [:]",
      "jenkins.securityRealm.allUsers.each { user ->",
      "  def detail = [:]",
      "  detail.name = user.displayName",
      "  detail.description = user.description",
      "  detail.delete = user.canDelete()",
      "  users[user.id] = detail",
      "}",
      "",
      "JsonOutput.toJson(users)"
    ],
    "description": "get_users"
  },
  "delete_user": {
    "prefix": "delete_user",
    "body": [
      "def jenkins = Jenkins.getInstanceOrNull()",
      "def user = jenkins.securityRealm.allUsers.find { user -> user.id == '__USERNAME__' }",
      "def flag = false;",
      "if (user != null) {",
      "  user.delete()",
      "  flag = true",
      "}",
      "return flag"
    ],
    "description": "delete_user"
  },
  "get_executor": {
    "prefix": "get_executor",
    "body": ["Jenkins jenkins = Jenkins.getInstance();jenkins.getNumExecutors()"],
    "description": "get_executor"
  },
  "set_executor": {
    "prefix": "set_executor",
    "body": ["Jenkins jenkins = Jenkins.getInstance();jenkins.setNumExecutors(__NUM__);jenkins.save();jenkins.getNumExecutors();"],
    "description": "set_executor"
  },
  "createCredential": {
    "prefix": "createCredential",
    "body": [
      "#!groovy",
      "import com.cloudbees.plugins.credentials.*",
      "import com.cloudbees.plugins.credentials.domains.*",
      "import com.cloudbees.plugins.credentials.impl.*",
      "import hudson.util.Secret",
      "",
      "import java.io.*",
      "import java.nio.file.*",
      "import java.time.LocalDateTime",
      "import jenkins.model.*",
      "import org.jenkinsci.plugins.plaincredentials.impl.*",
      "",
      "Jenkins jenkins = Jenkins.getInstance()",
      "def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()",
      "def domain = Domain.global()",
      "def kind = '__KIND__'",
      "def username = \"__USERNAME__\";",
      "def password = \"__PASSWORD__\";",
      "",
      "if (kind == 'CredentialUser') {",
      "    def id = username + '_user'",
      "    def credUser = makeCredentialUser(id, username, password, username + \" User\")",
      "    store.addCredentials(domain, credUser)",
      "} else if (kind == 'SecretText') {",
      "    def id = username + '_secret'",
      "    def secretText = makeSecretText(id, username, password)",
      "    store.addCredentials(domain, secretText)",
      "} else if (kind == 'KubeConfig') {",
      "    def pId = userame",
      "    Path fileLocation = Paths.get(\"/root/.kube/config\");",
      "    File kubeFile = new File(fileLocation.toString())",
      "    if (kubeFile.exists()) {",
      "        def secretBytes = SecretBytes.fromBytes(Files.readAllBytes(fileLocation))",
      "        def secretFile = new FileCredentialsImpl(",
      "            CredentialsScope.GLOBAL,",
      "            pId + '_k8s',",
      "            'kubeconfig file',",
      "            'kubeconfig',",
      "            secretBytes)",
      "        store.addCredentials(domain, secretFile)",
      "    }",
      "}",
      "jenkins.save()",
      "",
      "",
      "def makeSecretText(id, name, passwd) {",
      "    def secretText = new StringCredentialsImpl(",
      "        CredentialsScope.GLOBAL,",
      "        id,",
      "        name,",
      "        Secret.fromString(passwd)",
      "    )",
      "    return secretText",
      "}",
      "",
      "def makeCredentialUser(id, userame, passwd, desc) {",
      "  def jenkinsKeyUsernameWithPasswordParameters = [",
      "    description:  desc,",
      "    id:           id,",
      "    userName:     userame,",
      "    secret:       passwd",
      "  ]",
      "",
      "  def jenkinsKeyUsernameWithPassword = new UsernamePasswordCredentialsImpl(",
      "    CredentialsScope.GLOBAL,",
      "    jenkinsKeyUsernameWithPasswordParameters.id,",
      "    jenkinsKeyUsernameWithPasswordParameters.description,",
      "    jenkinsKeyUsernameWithPasswordParameters.userName,",
      "    jenkinsKeyUsernameWithPasswordParameters.secret",
      "  )",
      "",
      "  return jenkinsKeyUsernameWithPassword;",
      "}"
    ],
    "description": "createCredential"
  },
  "is_admin": {
    "prefix": "is_admin",
    "body": [
      "import jenkins.model.*",
      "import hudson.security.*",
      "",
      "def instance = jenkins.model.Jenkins.instance",
      "def authorizationStrategy = instance.getAuthorizationStrategy()",
      "def username = '__USERNAME__'",
      "def user = instance.getUser(username)",
      "",
      "def permissions = [:]",
      "if (user != null) {",
      "    authorizationStrategy.getGrantedPermissionEntries().each { entry ->",
      "    entry.value.each { permissionEntry ->",
      "        if (permissionEntry.sid == username && entry.key == Jenkins.ADMINISTER) {",
      "        permissions.put(entry.key, permissionEntry)",
      "        }",
      "    }",
      "    }",
      "}",
      "",
      "return permissions.isEmpty() ? false : true"
    ],
    "description": "is_admin"
  },
  "grv_changePrimaryView": {
    "prefix": "grv_changePrimaryView",
    "body": [
      "def jenkins = Jenkins.getInstanceOrNull();",
      "def view = jenkins.getPrimaryView().getViewName()",
      "",
      "if (view != '__NEW_VIEWNAME__') {",
      "    def newView = jenkins.getViews().find { v -> v.getViewName() == '__NEW_VIEWNAME__' }",
      "    if (newView) {",
      "        jenkins.setPrimaryView(newView)",
      "        view = jenkins.getPrimaryView().getViewName()",
      "    }",
      "}",
      "",
      "println view"
    ],
    "description": "GRV_SET_VIEW",
    "hidden": true
  },
  "getGlobalVars": {
    "prefix": "getGlobalVars",
    "body": [
      "import hudson.EnvVars;",
      "import hudson.slaves.EnvironmentVariablesNodeProperty;",
      "import hudson.slaves.NodeProperty;",
      "import hudson.slaves.NodePropertyDescriptor;",
      "import hudson.util.DescribableList;",
      "import groovy.json.JsonOutput;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "def result = [:];",
      "DescribableList<NodeProperty<?>, NodePropertyDescriptor> globalNodeProperties = instance.getGlobalNodeProperties();",
      "List<EnvironmentVariablesNodeProperty> envVarsNodePropertyList = globalNodeProperties.getAll(EnvironmentVariablesNodeProperty.class);",
      "envVarsNodePropertyList.each { env ->",
      "    env.getEnvVars().each { data ->",
      "        result[data.key] = data.value",
      "    }",
      "}",
      "println JsonOutput.toJson(result)"
    ],
    "description": "getGlobalVars",
    "hidden": true
  },
  "createGlobalVars": {
    "prefix": "createGlobalVars",
    "body": [
      "import hudson.EnvVars;",
      "import hudson.slaves.EnvironmentVariablesNodeProperty;",
      "import hudson.slaves.NodeProperty;",
      "import hudson.slaves.NodePropertyDescriptor;",
      "import hudson.util.DescribableList;",
      "import groovy.json.JsonOutput;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "DescribableList<NodeProperty<?>, NodePropertyDescriptor> globalNodeProperties = instance.getGlobalNodeProperties();",
      "List<EnvironmentVariablesNodeProperty> envVarsNodePropertyList = globalNodeProperties.getAll(EnvironmentVariablesNodeProperty.class);",
      "",
      "EnvVars envVars = null;",
      "if (envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0) {",
      "    EnvironmentVariablesNodeProperty newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty();",
      "    globalNodeProperties.add(newEnvVarsNodeProperty);",
      "    envVars = newEnvVarsNodeProperty.getEnvVars();",
      "} else {",
      "    envVars = envVarsNodePropertyList.get(0).getEnvVars();",
      "}",
      "def text = new String('__ENV_VAL__'.getBytes('iso-8859-1'),'utf-8');",
      "envVars.put('__ENV_KEY__', text);"
    ],
    "description": "createGlobalVars",
    "hidden": true
  },
  "deleteGlobalVars": {
    "prefix": "deleteGlobalVars",
    "body": [
      "import hudson.EnvVars;",
      "import hudson.slaves.EnvironmentVariablesNodeProperty;",
      "import hudson.slaves.NodeProperty;",
      "import hudson.slaves.NodePropertyDescriptor;",
      "import hudson.util.DescribableList;",
      "import groovy.json.JsonOutput;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "DescribableList<NodeProperty<?>, NodePropertyDescriptor> globalNodeProperties = instance.getGlobalNodeProperties();",
      "List<EnvironmentVariablesNodeProperty> envVarsNodePropertyList = globalNodeProperties.getAll(EnvironmentVariablesNodeProperty.class);",
      "",
      "EnvVars envVars = null;",
      "if (envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0) {",
      "    EnvironmentVariablesNodeProperty newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty();",
      "    globalNodeProperties.add(newEnvVarsNodeProperty);",
      "    envVars = newEnvVarsNodeProperty.getEnvVars();",
      "} else {",
      "    envVars = envVarsNodePropertyList.get(0).getEnvVars();",
      "}",
      "envVars.remove('__ENV_KEY__')"
    ],
    "description": "deleteGlobalVars",
    "hidden": true
  },
  "create_jenkins_shell": {
    "prefix": "createJenkinsShell",
    "body": [
      "#!groovy",
      "",
      "import jenkins.model.Jenkins",
      "",
      "import hudson.model.FreeStyleProject",
      "import hudson.model.ListView",
      "import hudson.model.View",
      "import hudson.model.BooleanParameterDefinition;",
      "import hudson.model.ChoiceParameterDefinition",
      "import hudson.model.StringParameterDefinition",
      "import hudson.model.ParametersDefinitionProperty",
      "",
      "import hudson.tasks.Shell",
      "",
      "def env = System.getenv()",
      "def jenkins = Jenkins.getInstance()",
      "",
      "def jobName = '__JOB_NAME__'",
      "def existJob = hudson.model.Hudson.instance.getJob(jobName)",
      "if (existJob == null) {",
      "    def job = jenkins.createProject(FreeStyleProject, jobName)",
      "    def desc = ''",
      "    job.setDescription(desc)",
      "",
      "    def shCmd = \"\"\"__SHELL_TEXT__",
      "\"\"\"",
      "    job.buildersList.add(new Shell(shCmd))",
      "    job.save()",
      "} else {",
      "    println \"job <${jobName}> exists\"",
      "}",
      ""
    ],
    "description": "CREATE_JENKINS_SHELL",
    "hidden": true
  },
  "delete_job_param": {
    "prefix": "delete_job_param",
    "body": [
      "#!groovy",
      "",
      "import jenkins.model.Jenkins",
      "import hudson.tasks.Shell",
      "",
      "def jenkins = Jenkins.getInstance()",
      "",
      "def jobName = '__JOB_NAME__'",
      "def delParam = '__PARAM_NAME__'",
      "def job = jenkins.getItemByFullName(jobName, FreeStyleProject)",
      "",
      "if (job == null || job.getProperty(ParametersDefinitionProperty.class) == null) {",
      "    println \"false\"",
      "} else if (job != null && job.getProperty(ParametersDefinitionProperty.class) != null) {",
      "    def paramDefs = job.getProperty(ParametersDefinitionProperty.class).getParameterDefinitions()",
      "    // println paramDefs",
      "",
      "    paramDefs.removeIf { paramDef ->",
      "        paramDef.name == delParam",
      "    }",
      "",
      "    job.removeProperty(ParametersDefinitionProperty.class)",
      "    job.addProperty(new ParametersDefinitionProperty(paramDefs))",
      "    println \"true\"",
      "}",
      ""
    ],
    "description": "delete_job_param",
    "hidden": true
  },
  "get_log_rotator": {
    "prefix": "get_log_rotator",
    "body": [
      "#!groovy",
      "import hudson.tasks.LogRotator;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "def jobName = '__JOB_NAME__'",
      "def job = Jenkins.instance.getItemByFullName(jobName)",
      "",
      "if (job == null) {",
      "    println \"Job '${jobName}' not found.\"",
      "} else {",
      "    def discarderProperty = job.getProperty(BuildDiscarderProperty.class)",
      "    // println discarderProperty",
      "    return (discarderProperty != null && discarderProperty.strategy != null) ? discarderProperty.strategy.numToKeep : 0;",
      "}"
    ],
    "description": "get_log_rotator",
    "hidden": true
  },
  "set_log_rotator": {
    "prefix": "set_log_rotator",
    "body": [
      "#!groovy",
      "import hudson.tasks.LogRotator;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "def jobName = '__JOB_NAME__'",
      "def job = Jenkins.instance.getItemByFullName(jobName)",
      "",
      "if (job == null) {",
      "    println \"Job '${jobName}' not found.\"",
      "} else {",
      "    def discarderProperty = job.getProperty(BuildDiscarderProperty.class)",
      "    // println discarderProperty",
      "    if (discarderProperty != null) {",
      "        job.removeProperty(BuildDiscarderProperty.class)",
      "    }",
      "    discarderProperty = new BuildDiscarderProperty(new LogRotator(-1, __MAX_COUNT__, -1, -1))",
      "    job.addProperty(discarderProperty)",
      "    job.save()",
      "    return \"${count}\"",
      "}"
    ],
    "description": "set_log_rotator",
    "hidden": true
  },
  "delete_log_rotator": {
    "prefix": "delete_log_rotator",
    "body": [
      "#!groovy",
      "import hudson.tasks.LogRotator;",
      "",
      "def instance = Jenkins.getInstanceOrNull();",
      "def jobName = '__JOB_NAME__'",
      "def job = Jenkins.instance.getItemByFullName(jobName)",
      "",
      "if (job == null) {",
      "    println \"Job '${jobName}' not found.\"",
      "} else {",
      "    def discarderProperty = job.getProperty(BuildDiscarderProperty.class)",
      "    if (discarderProperty != null) {",
      "        job.removeProperty(BuildDiscarderProperty.class)",
      "    }",
      "    job.save()",
      "    return 'true'",
      "}"
    ],
    "description": "delete_log_rotator",
    "hidden": true
  }
}
